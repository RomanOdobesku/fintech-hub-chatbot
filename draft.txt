import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from sqlalchemy import create_engine, select
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from your_models_module import User, Subscription, News # Замените на ваши модели

API_TOKEN = 'YOUR_API_TOKEN'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

DATABASE_URL = "sqlite+aiosqlite:///your_database.db"
engine = create_async_engine(DATABASE_URL, echo=True)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine, class_=AsyncSession)


async def get_latest_news():
    async with SessionLocal() as session:
        # Выбираем самые актуальные новости
        stmt = select(News).order_by(News.created_at.desc()).limit(5)  # Пример: выбираем последние 5 новостей
        result = await session.execute(stmt)
        latest_news = result.scalars().all()
        return latest_news


async def send_news_to_subscribers():
    latest_news = await get_latest_news()
    async with SessionLocal() as session:
        # Получаем всех пользователей
        stmt = select(User)
        result = await session.execute(stmt)
        users = result.scalars().all()

        # Рассылаем новости подписчикам
        for user in users:
            # Получаем подписки пользователя
            subscriptions = user.subscriptions
            for subscription in subscriptions:
                if subscription.category in [news.category for news in latest_news]:
                    news_for_user = [news for news in latest_news if news.category == subscription.category]
                    message = "Ваши новости по теме '{}' \n".format(subscription.category)
                    for news in news_for_user:
                        message += f"{news.title}: {news.content}\n"
                    await bot.send_message(user.id, message)


async def scheduled_news_delivery():
    while True:
        # Определите, когда будет происходить рассылка (например, каждый день в определенное время)
        now = datetime.now()
        target_time = now.replace(hour=9, minute=0, second=0, microsecond=0)  # Например, каждый день в 9 утра

        # Рассылка новостей, если текущее время равно целевому времени
        if now == target_time:
            await send_news_to_subscribers()

        # Ожидание до следующего дня
        await asyncio.sleep(86400)  # Пауза на 24 часа (один день)


async def on_startup(dispatcher):
    asyncio.create_task(scheduled_news_delivery())


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)

    Напиши docstring и тип возвращаемого объекта для этого кода
```python
```